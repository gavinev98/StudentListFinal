jdk:
- oraclejdk8
language: java
install:
- mvn install -DskipTests=true -Dmaven.javadoc.skip=true -B -V
services:
  - docker
dist: trusty

env:
  global:
  # COVERITY_SCAN_TOKEN
  # ** specific to your project **
  - secure: "uWg-L2Girn20ib3th46vjg"



addons:
  sonarcloud:
    organization: gavinev98-github
    token:
      secure: 37cc29a32a05b3205a101ccb430bb108813ad27b

  coverity_scan:

    # GitHub project metadata
    # ** specific to your project **
    project:
      name: gavinev98/studentlistfinal
      version: 1.0
      description: My Project

    # Where email notification of build analysis results will be sent
    notification_email: gavin.everett48@hotmail.com

    # Commands to prepare for build_command
    # ** likely specific to your build **
    build_command_prepend: ./configure

    # The command that will be added as an argument to "cov-build" to compile your project for analysis,
    # ** likely specific to your build **
    build_command: make

    # Pattern to match selecting branches that will run analysis. We recommend leaving this set to 'coverity_scan'.
    # Take care in resource usage, and consider the build frequency allowances per
    #   https://scan.coverity.com/faq#frequency
    branch_pattern: coverity_scan

stages:
- Unit Tests
- Sonarcloud Analysis
- Build docker image
- Test docker image
- Heroku Deployment / Deploy to Staging
- Heroku Deployment / Testing staging
- Heroku Deployment / Deploy to production
- Heroku Deployment / Test Production

# jobs to be included..
jobs:
  include:
    - stage: Unit Testing
      script: mvn -Dtest=CrudbootApplicationTests#addUser test
    - # stage name not required, will continue to use `test`
      script: mvn -Dtest=CrudbootApplicationTests#addStudent test
    - stage: Sonarcloud Analysis
      script:
      - mvn test
      - mvn clean org.jacoco:jacoco-maven-plugin:prepare-agent install sonar:sonar
    - stage: Build docker image
      script:
        - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
        - docker build -t docker-spring-boot .
        - docker images
        - docker tag docker-spring-boot $DOCKER_USERNAME/docker-spring-boot
        - docker push $DOCKER_USERNAME/docker-spring-boot
    - stage: Test docker image
      script: docker run --rm $DOCKER_USERNAME/docker-spring-boot
    - stage: Heroku Deployment / Deploy to Staging
      script: skip
      deploy: &heroku
        provider: heroku
        app: studentlistfinal
        api_key:
          secure: qFFL/zboiBgU/4XGwdzz0oaGnOfxGc08O6Sz7vmju7Yo9sMFoe11BNhrjtF2ZV7GmUDMkQm/QeBQjQpnOllsnpwm2zhJfVqiNEnQQ8+E+RDD2dRu7GfU8Tf7GvNm9/3qFFtgQRogKMcBxlmt51KxLhkTAgl7riqopnT2eMObsV9j+E4dEFyfgpEchEb+EFf1QUMgB07U+L6nFGOsfWpANn7QL4kKch5MIyCropPtqNcAkHpcyj+B9yWjkMNoyIu5a0pfKQ2D/jViGd3HeRKSv0qVH4THgNsrDWnbBd4zlg8/hOPnzrqBHwQM9KFWENZkbEJIMX/0AUBKx+q31WmTMm9DOgOPtUoCTxSzQ4XFZ/7lv5QHoV7k/XtI3XXbONk/1J4v3GOR254zfKAtgR2v264T9HwSFZQhvR37lm2iab6FTX7uzBe9mvxQr0l1aNH3M9O1cjlX12zHbqBAlvRs8J0sIX+RDqOCjSgKM4HYCYcb92HF9xLvdJkDZ83rn7L0gPxRdcACg68wR7C7HSINRGfd0CabhLgr0yiN7RwQRYYgBcMSL7r9IHCeFx0d2LUgPXYguskea7uQQcMsQ5BUkK3UbFsjOlEfXdxZ6y1YuAORcuFzgHAfsb0i5bAQcgvQE/B2wfXpE2sBKp96piLMCbygvhusrJTjkvDWMndGaRc=
    - stage: Heroku Deployment / Testing staging
      script: 'curl https://studentlistfinal.herokuapp.com'
    - stage: Heroku Deployment / Deploy to production
      script: skip
      deploy:
        <<: *heroku
        app: studentlistfinal
    - stage: Heroku Deployment / Test Production
      script: 'curl https://studentlistfinal.herokuapp.com'


notifications:
  slack:
    secure: h2At3CNf9bPMo4JJLyASd1Zjkm+u6HrRNbpzkcfr4eAWjpjfeuyrxZbYa1cPPnV4UuNS39sHTcmzhNbmry5dSYKQXgxROHLRkGeuEDNNeLQssLDkUxaGbq4+otRNEfxC2VpQlsSsly7jO76kg/a4reArw9g9EhyoWfB7V/D07CvT2kPD8kKqsVuAOEPFqlqSWcjGmKOue7lVa2XaKc+wXGESqQ4DIIPkCACKOsQ4un8OfS/Xs/2ovyt7G1Jrr0BVSMTAw8VwE6MKi2mZ+8YhOKIsuN/3xRiG2OqS5wggowIsZrkCm5wTY/jBLLQ9Bl3uon+QsVvdPkrDc4J0+NZ4P8UuiNx0BGs7Km7a3Dh+4R/wSEEM/AdbatGAhMCjobsg16p3I1wTmpNywduwQU2y9NLiOExF1eudywTmBQpacye+d74h37kKIE8xO0Lrq0+DQqJSDAlmTENPf7hR2BQmllctm3rLlUgbSc4Oe9+c7aHDNId7ADCdakc2+RWucuyV5LycODj+MvmoK5Yj0WGtVrHm9udzf2lQKa9KI93RQMui1+neWBs1vkD7AL4k8GL7Df9JiqM5Z6USha6d59NY0mz0AHgyGw4EP2OOzdOnWTWhkrNVToaODtOo9mGdLoVdZHevlX+hhSA/eENvoEvOVoNMOzLJu8gxFqNaNFr0F6E=

