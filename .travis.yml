jdk:
- oraclejdk8
language: java
sudo: required
install:
- mvn install -DskipTests=true -Dmaven.javadoc.skip=true -B -V
# install deps
- yarn install
services:
  - docker
dist: trusty



before_install:
# install heroku CLI
- wget -qO- https://toolbelt.heroku.com/install.sh | sh
# login to docker registries (dockerhub + heroku)
- echo "$ DOCKER_PASSWORD" | docker login -u "$ DOCKER_USERNAME" --password-stdin
- echo "$ HEROKU_PASSWORD" | docker login -u "$ HEROKU_USERNAME" --password-stdin registry.heroku.com


env:
  global:
  # COVERITY_SCAN_TOKEN
  # ** specific to your project **
  - secure: "uWg-L2Girn20ib3th46vjg"




addons:
  sonarcloud:
    organization: gavinev98-github
    token:
      secure: 37cc29a32a05b3205a101ccb430bb108813ad27b


stages:
- Unit Testing
- Sonarcloud Analysis
- Build docker image
- Heroku Deployment / Deploy to Staging
- Heroku Deployment / Testing staging
- Heroku Deployment / Deploy to production
- Heroku Deployment / Test Production

# jobs to be included...
jobs:
  include:
    - stage: Unit Testing
      script: mvn -Dtest=CrudbootApplicationTests#addUser test
    - # stage name not required, will continue to use `test`
      script: mvn -Dtest=CrudbootApplicationTests#addStudent test
    - stage: Sonarcloud Analysis
      script:
      - mvn test
      - mvn clean org.jacoco:jacoco-maven-plugin:prepare-agent install sonar:sonar

script:
  - yarn test
  - yarn build
      # build docker images
  - docker build -t docker-spring-boot .
  - docker tag docker-spring-boot $DOCKER_USERNAME/docker-spring-boot registry.heroku.com/$HEROKU_APP_NAME/web


deploy:
  provider: script
  script:
        # push to dockerhub & heroku
    docker push $DOCKER_USERNAME/docker-spring-boot;
    docker push registry.heroku.com/$HEROKU_APP_NAME/web;
    heroku container: web release --app $ HEROKU_APP_NAME
    on:
     branch: master


notifications:
  slack:
    secure: h2At3CNf9bPMo4JJLyASd1Zjkm+u6HrRNbpzkcfr4eAWjpjfeuyrxZbYa1cPPnV4UuNS39sHTcmzhNbmry5dSYKQXgxROHLRkGeuEDNNeLQssLDkUxaGbq4+otRNEfxC2VpQlsSsly7jO76kg/a4reArw9g9EhyoWfB7V/D07CvT2kPD8kKqsVuAOEPFqlqSWcjGmKOue7lVa2XaKc+wXGESqQ4DIIPkCACKOsQ4un8OfS/Xs/2ovyt7G1Jrr0BVSMTAw8VwE6MKi2mZ+8YhOKIsuN/3xRiG2OqS5wggowIsZrkCm5wTY/jBLLQ9Bl3uon+QsVvdPkrDc4J0+NZ4P8UuiNx0BGs7Km7a3Dh+4R/wSEEM/AdbatGAhMCjobsg16p3I1wTmpNywduwQU2y9NLiOExF1eudywTmBQpacye+d74h37kKIE8xO0Lrq0+DQqJSDAlmTENPf7hR2BQmllctm3rLlUgbSc4Oe9+c7aHDNId7ADCdakc2+RWucuyV5LycODj+MvmoK5Yj0WGtVrHm9udzf2lQKa9KI93RQMui1+neWBs1vkD7AL4k8GL7Df9JiqM5Z6USha6d59NY0mz0AHgyGw4EP2OOzdOnWTWhkrNVToaODtOo9mGdLoVdZHevlX+hhSA/eENvoEvOVoNMOzLJu8gxFqNaNFr0F6E=

